apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: google-bigquery-outputport-template-skeleton
  title: Google BigQuery Output Port (Skeleton)
  description: Creates an Output Port on Google BigQuery
  tags:
    - output-port
    - google
  mesh:
    icon: https://images.icon-icons.com/2699/PNG/512/google_bigquery_logo_icon_168150.png
  annotations:
    backstage.io/techdocs-ref: dir:.
spec:
  generates: componenttype:default/outputport
  owner: agilelab
  type: outputport
  parameters:
    - title: Google BigQuery Output Port
      description: |-
        This template allows you to create an Google BigQuery View from a specified source table. The schema is defined in the data contract to structure the data representation.

        After creation you can use the Editor Wizard to customize the component and add more details to the Output Port
    - title: Component metadata
      description: Basic information for this component.
      required:
        - name
        - domain
        - parentRef
        - description
      properties:
        name:
          title: Name
          type: string
          description: Required name used for display purposes
          ui:field: EntityNamePicker
          default: Google BigQuery Output Port
          ui:options:
            allowArbitraryValues: true
        description:
          title: Description
          type: string
          description: Help others understand what this Output Port is for
          default: Output Port that exposes information of this System to users and other systems.
        domain:
          title: Domain
          type: string
          description: Domain of the System this Output Port belongs to
          ui:field: EntityPicker
          ui:options:
            allowArbitraryValues: false
            allowedKinds:
              - Domain
        parentRef:
          title: Parent
          type: string
          description: Required. The System this Output Port belongs to, e.g. a Data Product. Be sure to choose the right one.
          ui:field: EntityPicker
          ui:filter:
            - fieldName: domain
              entityPath: spec.domain
          ui:options:
            allowArbitraryValues: false
            allowedKinds:
              - System
        identifier:
          title: Identifier
          type: string
          description: A unique identifier for the entity inside the domain. It will not be editable after creation and is expected to be a string that is sequences of [a-zA-Z] separated by any of [-_]
          ui:field: ComponentIdentifierPicker
          ui:options:
            allowArbitraryValues: false
        owner:
          title: Owner
          type: string
          description: System owner
          ui:field: EntitySelectionPicker
          ui:fieldName: parentRef
          ui:property: spec.owner
          ui:options:
            allowArbitraryValues: false
        dependsOn:
          title: Depends on
          type: array
          default: []
          items:
            type: string
            ui:field: EntityRelationsPicker
            ui:fieldName: parentRef
            relation: hasPart
          description: An Output Port could depend on other components in the same System. This information will be used to deploy the components in such an order that their dependencies already exist.
        domainName:
          type: string
          ui:field: EntitySelectionPicker
          ui:fieldName: domain
          ui:property: spec.mesh.name
          ui:options:
            allowArbitraryValues: false
          ui:widget: hidden
        parentRefName:
          type: string
          ui:field: EntitySelectionPicker
          ui:fieldName: parentRef
          ui:property: spec.mesh.name
          ui:options:
            allowArbitraryValues: false
          ui:widget: hidden

    - title: Data contract schema
      description: |-
        Define the schema of the Output Port view. Primitive data types supported.
        
        The **Data Contract** schema specifies the structure of the data that will be exposed through the Output Port.  
        
        This schema will be used by the Output Port to create a Google BigQuery view with the exact columns defined in this schema.
        **If the schema is not provided, the source table schema will be used to create the view**

        The Data Contract ensures consistency and enforces a predefined structure.

        You can modify the Data Contract later in the **Edit** section.
      properties:
        schemaDefinition:
          type: object
          ui:options:
            displayTitle: false
          properties:
            schemaColumns:
              title: Column Definitions
              type: array
              ui:ArrayFieldTemplate: ArrayTableTemplate
              items:
                type: object
                ui:ObjectFieldTemplate: TableRowTemplate
                required:
                  - name
                  - dataType
                properties:
                  name:
                    type: string
                    title: Name
                  description:
                    type: string
                    title: Description
                  dataType:
                    type: string
                    default: STRING
                    title: Data Type
                    enum:
                      - STRING
                      - INTEGER
                      - FLOAT
                      - NUMERIC
                      - BIGNUMERIC
                      - BOOLEAN
                      - TIMESTAMP
                      - DATE
                      - TIME
                      - DATETIME
                      - JSON
                      - GEOGRAPHY
                      - BYTES
                  constraint:
                    type: string
                    title: Mode
                    default: NULLABLE
                    enum:
                      - NULLABLE
                      - REQUIRED
                      - REPEATED
                allOf:
                  - if:
                      properties:
                        dataType:
                          oneOf:
                            - const: STRING
                            - const: BYTES
                    then:
                      properties:
                        dataLength:
                          title: Column Length
                          type: integer
                          description: Maximum length of column row
                          minimum: 0
                  - if:
                      properties:
                        dataType:
                          oneOf:
                            - const: NUMERIC
                            - const: BIGNUMERIC
                    then:
                      properties:
                        precision:
                          title: Precision
                          type: integer
                          description: Precision of the numeric data type
                          minimum: 1
                          maximum: 38
                          default: 38
                        scale:
                          title: Scale
                          type: integer
                          description: Scale of the numeric data type; cannot be greater than precision minus 1
                          minimum: 0
                          maximum: 38
                          default: 0
                        roundingMode:
                          title: Rounding mode
                          type: string
                          default: ROUNDING_MODE_UNSPECIFIED
                          enum:
                            - ROUNDING_MODE_UNSPECIFIED
                            - ROUND_HALF_AWAY_FROM_ZERO
                            - ROUND_HALF_EVEN

    - title: Provide BigQuery view information
      description: |-
        Fill out the information about the target project and dataset where the view Output Port will be created,
        as well as the source table name. If no value is provided for the **dataset** field, an automatic value will
        be generated based on the domain, system name, major version, and deployment environment
      required:
        - project
        - tableName
        - viewName
      properties:
        project:
          title: Project ID
          type: string
          description: Google BigQuery project ID where the dataset is stored
        dataset:
          title: Dataset name
          type: string
          description: Dataset name where the source table is stored and the view table will be created. If not provided
            it will be autogenerated
        tableName:
          title: Table name
          type: string
          description: Source table name located on the provided dataset
        viewName:
          title: View name
          type: string
          description: Name of the view to be created and exposed as Output Port

  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        targetPath: '.'
        values:
          name: '${{ parameters.name }}'
          fullyQualifiedName: '${{ parameters.fullyQualifiedName }}'
          description: '${{ parameters.description }}'
          domain: '${{ parameters.domain }}'
          parentRef: '${{ parameters.parentRef }}'
          domainName: '${{ parameters.domainName }}'
          parentRefName: '${{ parameters.parentRefName }}'
          identifier: '${{ parameters.identifier }}'
          owner: '${{ parameters.owner }}'
          dependsOn: '${{ parameters.dependsOn }}'
          schemaColumns: '${{ parameters.schemaDefinition.schemaColumns }}'
          project: '${{ parameters.project }}'
          dataset: '${{ parameters.dataset }}'
          tableName: '${{ parameters.tableName }}'
          viewName: '${{ parameters.viewName }}'
          creationDate: '${{ parameters.creationDate }}'
          useCaseTemplateId: urn:dmb:utm:google-bigquery-outputport-template:0.0.0
          useCaseTemplateVersion: 0.0.0
          infrastructureTemplateId: urn:dmb:itm:google-bigquery-tech-adapter:0
          destination: &destination 'gitlab.com?owner=simone.pusceddu&repo=${{ parameters.name.split(" ") | join("") | lower }}'

    - id: publish
      name: Publish
      action: witboostMeshComponent:publish:gitlab
      input:
        allowedHosts: ['gitlab.com']
        description: 'This is ${{ parameters.name }}'
        repoUrl: *destination
        rootDirectory: '.'
        parentRef: '${{ parameters.parentRef }}'

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: '${{ steps.publish.output.repoContentsUrl }}'
        catalogInfoPath: '/catalog-info.yaml'

  output:
    links:
      - title: Repository
        url: '${{ steps.publish.output.remoteUrl }}'
      - title: Open in catalog
        icon: catalog
        entityRef: '${{ steps.register.output.entityRef }}'
